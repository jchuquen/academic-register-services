openapi: 3.0.3
info:
  title: Academic Registration For Universities "AR4U" API
  description: |-
    This OpenAPI 3.0 file exposes and documents the REST API for working with the **Academic Registration For Universities "AR4U" API**.
  contact:
    email: jorge.chuquen@perficient.com
  version: 1.0.0
servers:
  - url: http://localhost:1500/ar4u/api
tags:
  - name: admissions
    description: Everything related to the admission process
    
  - name: academic-plans
    description: Resources to configure everything related to the courses offered by the university 
    
  - name: grades-management
    description: Operations to manage grades information
    
  - name: security
    description: Enpoints for managing security settings
  
paths:
  /v1/admissions/identification-types:
    get:
      tags:
        - admissions
      summary: List registered identification types
      description: List registered identification types
      operationId: listIdentificationTypes
      responses:
        '200':
          description: Identification type found
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/IdentificationType'          
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/IdentificationType'
                
        '204':
          description: No identification types were found
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Resource not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - admissions
      summary: Create a new identification type (e.g CC, TI, RC,...) 
      description: Create a new identification type
      operationId: createIdentificationType
      requestBody:
        description: Identification type object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentificationTypeNew'
          application/xml:
            schema:
              $ref: '#/components/schemas/IdentificationTypeNew'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IdentificationTypeNew'
        required: true
      responses:
        '201':
          description: Identification type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationType'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationType'
                
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
        '403':
          description: Client doesnÂ´t have enough permissions to access this resource
        
        '409':
          description: Identification type already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
          
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /v1/admissions/identification-types/{id}:
    get:
      tags:
        - admissions
      summary: Find an identification type by ID
      description: Find an identification type by ID
      operationId: findIdentificationTypeById
      parameters:
        - name: id
          in: path
          description: Identification type ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Identification type found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationType'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationType'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Identification type not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
            
    put:
      tags:
        - admissions
      summary: Update an existing identification type
      description: Update an existing identification type
      operationId: updateIdentificationType
      parameters:
        - name: id
          in: path
          description: Identification type ID
          required: true
          schema:
            type: integer
            format: int16
      requestBody:
        description: Identification type object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentificationType'
          application/xml:
            schema:
              $ref: '#/components/schemas/IdentificationType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IdentificationType'
        required: true
      responses:
        '200':
          description: Identification type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationType'          
            application/xml:
              schema:
                $ref: '#/components/schemas/IdentificationType'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Identification type not found
        '409':
          description: Identification type already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
            
    delete:
      tags:
        - admissions
      summary: Delete an existing identification type
      description: Delete an existing identification type
      operationId: deleteIdentificationType
      parameters:
        - name: id
          in: path
          description: Identification type ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Identification type deleted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Identification type not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
            
  /v1/academic-plans/subjects:
    get:
      tags:
        - academic-plans
      summary: List registered subjects
      description: List registered subjects
      operationId: listSubjects
      responses:
        '200':
          description: Subjects found
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Subject'          
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Subject'
                
        '204':
          description: No subjects were found
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Resource not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    
    post:
      tags:
        - academic-plans
      summary: Create a new subject (e.g Chemestry, Maths, Physics,...) 
      description: Create a new subject
      operationId: createSubject
      requestBody:
        description: Subject object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectNew'
          application/xml:
            schema:
              $ref: '#/components/schemas/SubjectNew'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubjectNew'
        required: true
      responses:
        '201':
          description: Subject created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subject'
                
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
        '403':
          description: Client doesnÂ´t have enough permissions to access this resource
        
        '409':
          description: Subject already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
          
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /v1/academic-plans/subjects/{id}:
  
    get:
      tags:
        - academic-plans
      summary: Find a subject by ID
      description: Find a subject by ID
      operationId: findSubjectById
      parameters:
        - name: id
          in: path
          description: Subject ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Subject found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subject'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Subject not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    put:
      tags:
        - academic-plans
      summary: Update an existing subject
      description: Update an existing subject
      operationId: updateSubject
      parameters:
        - name: id
          in: path
          description: Subject ID
          required: true
          schema:
            type: integer
            format: int16
      requestBody:
        description: Subject object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
          application/xml:
            schema:
              $ref: '#/components/schemas/Subject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      responses:
        '200':
          description: Subject updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Subject'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Subject not found
        '409':
          description: Subject already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    delete:
      tags:
        - academic-plans
      summary: Delete an existing subject
      description: Delete an existing subject
      operationId: deleteSubject
      parameters:
        - name: id
          in: path
          description: Subject ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Subject deleted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Subject not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /v1/academic-plans/courses:
    get:
      tags:
        - academic-plans
      summary: List registered courses
      description: List registered courses
      operationId: listCourses
      responses:
        '200':
          description: Courses found
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Course'          
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Course'
                
        '204':
          description: No courses were found
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Resource not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    
    post:
      tags:
        - academic-plans
      summary: Create a new course (e.g Software Development, MathLab, Social studies,...) 
      description: Create a new course
      operationId: createCourse
      requestBody:
        description: Course object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseNew'
          application/xml:
            schema:
              $ref: '#/components/schemas/CourseNew'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CourseNew'
        required: true
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
                
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
        '403':
          description: Client doesnÂ´t have enough permissions to access this resource
        
        '409':
          description: Course already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
          
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /v1/academic-plans/courses/{id}:
  
    get:
      tags:
        - academic-plans
      summary: Find a course by ID
      description: Find a course by ID
      operationId: findCourseById
      parameters:
        - name: id
          in: path
          description: Course ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Course found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Course not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    put:
      tags:
        - academic-plans
      summary: Update an existing course
      description: Update an existing course
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          description: Course ID
          required: true
          schema:
            type: integer
            format: int16
      requestBody:
        description: Course object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/xml:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Course not found
        '409':
          description: Course already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    delete:
      tags:
        - academic-plans
      summary: Delete an existing course
      description: Delete an existing course
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          description: Course ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Course deleted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Course not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets


  /v1/academic-plans/periods:
    get:
      tags:
        - academic-plans
      summary: List registered periods
      description: List registered periods
      operationId: listPeriods
      responses:
        '200':
          description: Periods found
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Period'          
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Period'
                
        '204':
          description: No periods were found
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Resource not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    
    post:
      tags:
        - academic-plans
      summary: Create a new period (e.g I/2023, II/2023, IV/2023,...) 
      description: Create a new period
      operationId: createPeriod
      requestBody:
        description: Period object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeriodNew'
          application/xml:
            schema:
              $ref: '#/components/schemas/PeriodNew'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PeriodNew'
        required: true
      responses:
        '201':
          description: Period created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Period'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Period'
                
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
        '403':
          description: Client doesnÂ´t have enough permissions to access this resource
        
        '409':
          description: Period already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
          
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
                
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
  /v1/academic-plans/periods/{id}:
  
    get:
      tags:
        - academic-plans
      summary: Find a period by ID
      description: Find a period by ID
      operationId: findPeriodById
      parameters:
        - name: id
          in: path
          description: Period ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Period found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Period'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Period'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Period not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    put:
      tags:
        - academic-plans
      summary: Update an existing period
      description: Update an existing period
      operationId: updatePeriod
      parameters:
        - name: id
          in: path
          description: Period ID
          required: true
          schema:
            type: integer
            format: int16
      requestBody:
        description: Period object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Period'
          application/xml:
            schema:
              $ref: '#/components/schemas/Period'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Period'
        required: true
      responses:
        '200':
          description: Period updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Period'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Period'
        '400':
          description: Invalid request or content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Period not found
        '409':
          description: Period already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  
    delete:
      tags:
        - academic-plans
      summary: Delete an existing period
      description: Delete an existing period
      operationId: deletePeriod
      parameters:
        - name: id
          in: path
          description: Period ID
          required: true
          schema:
            type: integer
            format: int16
      responses:
        '200':
          description: Period deleted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Not enough permissions to access this resource
        '404':
          description: Period not found
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - petstore_auth:
            - write:pets
            - read:pets





    
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
  
    ApiError:
      type: object
      properties: 
        mainMessage: 
          type: string
          description: Main error message
          example: This is a main error message
        detailedErrors:
          type: array
          items:
            type: string
          example: 
              - Specific error 1
              - Specific error 2
            
        
    IdentificationTypeNew:
      type: object
      properties:
        name: 
          type: string
          example: CC
          
    IdentificationType:
      type: object
      properties:
        id:
          type: integer
          format: int16
          example: 1
        name: 
          type: string
          example: CC
        version:
          type: number
          format: double
          example: 25
    
    SubjectNew:
      type: object
      properties:
        name: 
          type: string
          example: Maths    
    
    Subject:
      type: object
      properties:
        id:
          type: integer
          format: int16
          example: 15
        name: 
          type: string
          example: Maths
        version:
          type: number
          format: double
          example: 2
          
    CourseNew:
      type: object
      properties:
        name: 
          type: string
          example: Software Development    
    
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int16
          example: 2
        name: 
          type: string
          example: Software Development
        version:
          type: number
          format: double
          example: 1
          
    PeriodNew:
      type: object
      properties:
        name: 
          type: string
          example: I/2023    
        isActive: 
          type: boolean
          example: true
    
    Period:
      type: object
      properties:
        id:
          type: integer
          format: int16
          example: 33
        name: 
          type: string
          example: I/2023    
        isActive: 
          type: boolean
          example: true
        version:
          type: number
          format: double
          example: 2
          
          
          
          
          
          
          
          
          
          
          
          
          
    
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header